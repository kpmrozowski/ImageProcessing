FROM ubuntu:jammy-20240416

LABEL maintainer="Kornel Mrozowski kpmrozowski@gmail.com"

RUN apt update && \
    apt upgrade -y && \
# tzdata
    ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime && \
    apt-get install -y tzdata && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    apt install -y curl gnupg lsb-release sudo vim git ninja-build wget build-essential ffmpeg libeigen3-dev libglew-dev && \
# adding user jetbot
    adduser --disabled-password --gecos '' jetbot && \
    adduser jetbot sudo && \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
WORKDIR /home/jetbot
USER jetbot

RUN mkdir /home/jetbot/sdk && \
    sudo apt update && sudo apt install -y locales && \
    sudo locale-gen en_US en_US.UTF-8 && \
    sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
    export LANG=en_US.UTF-8 && \
    echo "export LANG=en_US.UTF-8" >> /home/jetbot/.bashrc
WORKDIR /home/jetbot/sdk

# install ROS 2 Humble
RUN sudo apt update &&\
    sudo apt install -y software-properties-common &&\
    sudo add-apt-repository universe &&\
    sudo apt update &&\
    sudo apt install -y curl gnupg lsb-release &&\
    sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg &&\
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null &&\
    sudo apt update &&\
    sudo apt upgrade -y &&\
    sudo rm /bin/sh &&\
    sudo ln -s /usr/bin/bash /bin/sh &&\
    sudo apt-get update -y && \
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y keyboard-configuration &&\
    sudo apt install -y ros-humble-desktop &&\
    echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc

RUN sudo apt update &&\
    sudo apt install -y python3-catkin-pkg \
    python3-colcon-common-extensions \
    python3-rosdep \
    python3-argcomplete \
    python3-pip \
    python-setuptools &&\
    rm -rf /var/lib/apt/lists/*rm

RUN sudo add-apt-repository --update -y ppa:ubuntu-toolchain-r/test &&\
    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - &&\
    sudo add-apt-repository --update -y "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main" &&\
    sudo apt install -y \
    clang-15 \
    lldb-15 \
    lld-15 \
    clangd-15 \
    clang-tidy-15 \
    clang-format-15 \
    clang-tools-15 \
    llvm-15-dev \
    llvm-15-tools \
    libc++-15-dev \
    libc++abi-15-dev \
    libclang-common-15-dev \
    libclang-15-dev \
    libclang-cpp15-dev \
    libunwind-15-dev \
    gcc-11 \
    g++-11 \
    libfmt-dev \
    bash-completion \
    dirmngr \
    htop \
    gdb \
    git-lfs \
    x11-apps \
    libgmp3-dev \
    pybind11-dev \
    gitk \
    meld \
    terminator

RUN sudo apt update &&\
    sudo apt install -y \
    ros-humble-xacro \
    ros-humble-angles \
    ros-humble-ros2-control \
    ros-humble-realtime-tools \
    ros-humble-control-toolbox \
    ros-humble-ros2-controllers \
    ros-humble-joint-state-publisher \
    ros-humble-joint-state-publisher-gui \
    ros-humble-ament-cmake-clang-format \
    ros-humble-dynamic-edt-3d \
    ros-humble-rviz-visual-tools \
    ros-humble-control-msgs \
    ros-humble-sensor-msgs \
    ros-humble-vision-msgs \
    ros-humble-rosbridge-msgs
# install realsense - only if you will run on real hardware
# Instructions from https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md
RUN sudo apt-key adv --keyserver keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE &&\
    sudo add-apt-repository "deb https://librealsense.intel.com/Debian/apt-repo $(lsb_release -cs) main" -u &&\
    sudo apt update &&\
    sudo apt-get install -y \
        librealsense2-dkms \
        librealsense2-utils \
        librealsense2-dev \
        ros-humble-realsense2-camera-dbgsym \
        ros-humble-realsense2-camera-msgs \
        ros-humble-realsense2-camera-msgs-dbgsym \
        ros-humble-realsense2-description \
        ros-humble-ros2bag \
        ros-humble-cv-bridge

# upgrade cmake 3.16 to 3.28
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null &&\
    sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" &&\
    sudo apt update &&\
    sudo apt install cmake -y && \
    echo "================= cmake-3.28.1 installed !!! ==================="

# cuda-toolkit
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin &&\
    sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 &&\
    sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub &&\
    sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/ /" &&\
    wget https://developer.download.nvidia.com/compute/cuda/11.1.1/local_installers/cuda-repo-ubuntu2004-11-1-local_11.1.1-455.32.00-1_amd64.deb &&\
    sudo dpkg -i cuda-repo-ubuntu2004-11-1-local_11.1.1-455.32.00-1_amd64.deb &&\
    rm cuda-repo-ubuntu2004-11-1-local_11.1.1-455.32.00-1_amd64.deb &&\
    sudo apt-key add /var/cuda-repo-ubuntu2004-11-1-local/7fa2af80.pub &&\
    sudo apt-get update &&\
    sudo apt-get -y install\
 cuda-toolkit-11-1\
 ros-humble-rosbag2-storage-mcap\
 libstdc++-13-dev\
 clinfo ocl-icd-opencl-dev\
 libcudnn8-dev\
 libcudnn8\
 cmake-curses-gui\
 g++-12\
 gcc-12\
 python3-dev\
 python3-numpy\
 python3-pip

# RUN cd /home/jetbot/sdk/opencv &&\
    # f637629c5a60cc19d41be898c2f67fdcba931f15 Dec 27, 2022
    # git checkout f637629c5a60cc19d41be898c2f67fdcba931f15 &&\
    # cd /home/jetbot/sdk/opencv_contrib &&\
    # 8db3e627fb20237e3916f6543194df4266a82628 Dec 20, 2022
    # 325e6abe95d10eff05f34f8f6504a24bde6ec94b jan 13, 2023
    # 2276095e556bc7d668db81d50636aead728d6628 Dec 27, 2022
    # git checkout 2276095e556bc7d668db81d50636aead728d6628 &&\
RUN sudo echo "deb http://archive.ubuntu.com/ubuntu focal main universe"  | sudo tee -a /etc/apt/sources.list &&\
    cat /etc/apt/sources.list &&\
    sudo rm /etc/apt/sources.list.d/* &&\
    sudo apt-get update -q &&\
    sudo apt-get -y install\
 gcc-8\
 g++-8

# install opencv
RUN cd /home/jetbot/sdk &&\
    git clone --depth 1 --branch 4.7.0 https://github.com/opencv/opencv.git &&\
    git clone --depth 1 --branch 4.7.0 https://github.com/opencv/opencv_contrib.git &&\
    CUDA_HOME=/usr/local/cuda-11.1 \
    CXX=/usr/bin/g++-8 \
    CC=/usr/bin/gcc-8 \
    cmake \
        -D CMAKE_C_COMPILER=/usr/bin/gcc-8 \
        -D CMAKE_CXX_COMPILER=/usr/bin/g++-8 \
        -D CMAKE_BUILD_TYPE=Release \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D OPENCV_EXTRA_MODULES_PATH=/home/jetbot/sdk/opencv_contrib/modules \
        -D OPENCV_ENABLE_NONFREE=ON \
        -D OPENCV_GENERATE_PKGCONFIG=ON \
        -D BUILD_opencv_calib3d=ON \
        -D BUILD_opencv_core=ON \
        -D BUILD_opencv_features2d=ON \
        -D BUILD_opencv_flann=ON \
        -D BUILD_opencv_highgui=ON \
        -D BUILD_opencv_imgcodecs=ON \
        -D BUILD_opencv_imgproc=ON \
        -D BUILD_opencv_objdetect=ON \
        -D BUILD_opencv_photo=ON \
        -D BUILD_opencv_stitching=ON \
        -D BUILD_opencv_video=ON \
        -D BUILD_opencv_videoio=ON \
        -D BUILD_opencv_ximgproc=ON \
        -D BUILD_opencv_cudaarithm=ON \
        -D BUILD_opencv_cudabgsegm=ON \
        -D BUILD_opencv_cudacodec=ON \
        -D BUILD_opencv_cudafeatures2d=ON \
        -D BUILD_opencv_cudafilters=ON \
        -D BUILD_opencv_cudaimgproc=ON \
        -D BUILD_opencv_cudaobjdetect=ON \
        -D BUILD_opencv_cudaoptflow=ON \
        -D BUILD_opencv_cudastereo=ON \
        -D BUILD_opencv_cudawarping=ON \
        -D INSTALL_C_EXAMPLES=OFF \
        -D INSTALL_PYTHON_EXAMPLES=OFF \
        -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
        -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.1 \
        -D ENABLE_FAST_MATH=ON \
        # -D ENABLE_NEON=ON \
        -D CUDA_FAST_MATH=ON \
        -D CUDA_ARCH_BIN=8.6 \
        -D OPENCV_DNN_CUDA=ON \
        -D WITH_CUDNN=ON \
        -D WITH_CUDA=ON \
        -D CUDNN_LIBRARY=/usr/lib/x86_64-linux-gnu/libcudnn.so.8.9.7 \
        -D CUDNN_INCLUDE_DIR=/usr/include \
        -D BUILD_NEW_PYTHON_SUPPORT=ON \
        -D BUILD_TESTS=OFF \
        -D BUILD_TIFF=ON \
        -D BUILD_TBB=ON \
        -D BUILD_EXAMPLES=OFF \
        -D BUILD_opencv_python2=OFF \
        -D BUILD_opencv_python3=ON \
        -D BUILD_LIST=\
core,\
highgui,\
calib3d,\
imgproc,\
imgcodecs,\
cudaimgproc,\
stereo,\
cudastereo,\
cudev,\
ximgproc,\
aruco,\
# flann,\
# features2d,\
# xfeatures2d,\
# cudafeatures2d,\
# viz,\
# dnn\
# gapi
# ml
# objdetect
# photo
# stitching
# video
# videoio
# alphamat
# barcode
# bgsegm
# bioinspired
# ccalib
# cudaarithm
# cudabgsegm
# cudacodec
# cudafilters
# cudalegacy
# cudaobjdetect
# cudaoptflow
# cudawarping
# datasets
# dnn_objdetect
# dnn_superres
# dpm
# face
# freetype
# fuzzy
# hdf
# hfs
# img_hash
# intensity_transform
# line_descriptor
# mcc
# optflow
# phase_unwrapping
# plot
# quality
# rapid
# reg
# rgbd
# saliency
# sfm
# shape
# structured_light
# superres
# surface_matching
# text
# tracking
# videostab
# wechat_qrcode
# xobjdetect
# xphoto
        -G Ninja \
        -S /home/jetbot/sdk/opencv \
        -B /home/jetbot/sdk/opencv/build && \
    ninja -j$(nproc) -l$(nproc) -C /home/jetbot/sdk/opencv/build && \
    sudo ninja -C /home/jetbot/sdk/opencv/build install && \
    sudo ldconfig && \
    sudo apt-get update && \
    cd /home/jetbot/sdk/ && \
    rm -r /home/jetbot/sdk/* && \
    echo "================= opencv installed !!! ===================" && \
    echo "================= opencv installed !!! ===================" && \
    echo "================= opencv installed !!! ==================="

WORKDIR /home/jetbot

# this value will be overwritten with that one from devcontainer.json
ARG DOMAIN_ID=17

# add environmental variables and aliases
RUN sudo apt update &&\
    sudo apt install -y gcc-9 g++-9 &&\
    sudo sed -i '$ d' /etc/apt/sources.list &&\
    sudo apt update &&\
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 50 &&\
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 &&\
    sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 50 &&\
    sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 90 &&\
    echo "export MESA_GL_VERSION_OVERRIDE=3.3" >> /home/jetbot/.bashrc &&\
    echo "export CUDACXX=/usr/local/cuda-11.1/bin/nvcc" >> /home/jetbot/.bashrc &&\
    echo "export ROS_DOMAIN_ID=${DOMAIN_ID}" >> /home/jetbot/.bashrc &&\
    CMAKE_ARGUMENTS_COMMON="-DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DTCNN_CUDA_ARCHITECTURES=86 -DCMAKE_CUDA_ARCHITECTURES=86" &&\
    echo -e "alias runColcon=\"colcon build --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo $CMAKE_ARGUMENTS_COMMON\"" >> /home/jetbot/.bash_aliases &&\
    echo -e "alias runColconVerbose=\"colcon build --event-handlers console_direct+ --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo $CMAKE_ARGUMENTS_COMMON\"" >> /home/jetbot/.bash_aliases &&\
    echo -e "alias runColconPkgs=\"colcon build --cmake-args $CMAKE_ARGUMENTS_COMMON --packages-up-to\"" >> /home/jetbot/.bash_aliases &&\
    echo -e "alias runColconPkgsVerbose=\"colcon build --event-handlers console_direct+ --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo $CMAKE_ARGUMENTS_COMMON --packages-up-to\"" >> /home/jetbot/.bash_aliases &&\
    echo -e "alias runColconPkgsDebug=\"colcon build --event-handlers console_direct+ --cmake-args -DCMAKE_BUILD_TYPE=Debug $CMAKE_ARGUMENTS_COMMON --packages-up-to\"" >> /home/jetbot/.bash_aliases &&\
    mkdir Develop
